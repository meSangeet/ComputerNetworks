Error and flow control ->

let's say sender send some data and while it reaches the reciever some data is lost. then the concept of error and flow control comes into picture.

transport and datalink layer needs this error and flow control because transport layer works on top of IP which is not reliable. Similary data link layer works on the top of physical layer and there can be loss of bits and data in physical layer.
So because of all these reasons error and flow control is needed in the case of transport and data link layer.

uses of error and flow control ->

1. checking that no packet is lost
2. checkinf that the order of sending and receiving is same
3. checking whether there is an error in the packets sent.

Stop and wait ARQ 

characteristics ->

1. used in connection oriented communication.
2. It is used in data link and transport layers.
3. It offers error and flow control
4. Stop and wait ARQ mainly implements sliding window protocol concept with window size 1.

some useful terms ->

1. propagation delay : (distance between routers)/(velocity of propagation)

2. RoundTripTime(RTT) : 2*Propagation Delay

3. TimeOut(TO) = 2*RTT

4. TimeToLive (TTL) : 2*TimeOut. (Maximum TTL is 180 seconds)


Simple Stop and Wait ->

Sender :

1. Send one data packet at a time.
2. Send next packet only after reveiving acknowledgement for previous.

Receiver  :

1. Send acknowledgement after receiving and consuming of the data packet.
2. After consuming packet acknowledgement need to be sent(Flow control).

Problems :

1. Lost data -> when data is lost in between the process of transmission, the receiver does not get data and the sender keeps waiting for acknowledgement for infinite amount of time.

2. Lost acknowledgement -> If acknowledgement is lost then sender again keeps waiting for it for infinte amount of time.

3. Delayed acknowledgement/data : After timeout on sender side, a long delayed acknowledgement might be wrongly considered as acknowledgement of some other recent packet.


To solve this Stop And Wait ARQ(Automatic Repeat Request) comes into picture.

Stop and Wait ARQ(Automatic Repeat Request)

It does both error and flow control

1. Time Out -> This is used to solve the problem of lost data. There is a retransmission of data after time out resolves lost data problem.

2. Sequence Number -> 

there is sequence number for both data and acknowledgement. Whenever a receiver receives data it also receives the sequence number so that it can send the acknowledgement number such that the sender will send the next packet. So if two data packets of same sequence number comes it will send the acknowledgement of only one to avoid redundancy. Similar thing happen at the sender's side. 

Working of Stop and Wait ARQ:

1-> Sender A sends a data frame or packet with sequence number 0.
2-> Receiver B, after receiving data frame, sends an acknowledgement with sequence number 1 (the sequence number of next expected data frame or packet)
There is only a one-bit sequence number that implies that both sender and receiver have a buffer for one frame or packet only.

stopAndWaitARQ
 

Characteristics of Stop and Wait ARQ:

 

It uses the link between sender and receiver as half-duplex link
Throughput = 1 Data packet/frame per  RTT
If Bandwidth*Delay product is very high, then stop and wait protocol is not so useful. The sender has to keep waiting for acknowledgements before sending the processed next packet.
It is an example for “Closed Loop OR connection-oriented “ protocols
It is a special category of SWP where its window size is 1
Irrespective of number of packets sender is having stop and wait for protocol  requires only  2 sequence numbers 0 and 1

The Stop and Wait ARQ solves main three problems but may cause big performance issues as sender always waits for acknowledgement even if it has next packet ready to send. Consider a situation where you have a high bandwidth connection and propagation delay is also high (you are connected to some server in some other country through a high-speed connection). To solve this problem, we can send more than one packet at a time with a larger sequence number.

So Stop and Wait ARQ may work fine where propagation delay is very less, for example, LAN connections, but performs badly for distant connections like satellite connection.


Efficiency: Stop and Wait is a flow control protocol. In which the sender sends one packet and waits for the receiver to acknowledge and then it will send the next packet. In case if the acknowledgement is not received, the sender will retransmit the packet. This is the simplest one and easy to implement. but the main disadvantage is the efficiency is very low.



Total time taken to send one packet, 
 

= Tt(data) + Tp(data) + Tq + Tpro + Tt(ack) + Tp(ack)

Since,
Tp(ack) = Tp(data)

And,
Tt(ack) << Tt(data).

So we can neglect Tt(ack)
Tq = 0 and Tpro = 0

Hence, 
Total time = Tt(data) + 2 * Tp 


Where, 
 

Tt(data) : Transmission delay for Data packet
Tp(data) : propagation delay for Data packet
Tq: Queuing delay
Tpro: Processing delay
Tt(ack): Transmission delay for acknowledgment
Tp(ack) : Propagation delay for acknowledgment 


We know that the Efficiency (η), 
 

= Useful time / Total cycle time.
= Tt / (Tt + 2*Tp)
= 1 / (1+2*(Tp/Tt))
= 1 / (1+2*a) 

where, 
a = Tp / Tt 


Throughput: Number of bits send per second, which is also known as Effective Bandwidth or Bandwidth utilization.
 

Throughput, 
= L/(Tt + 2*Tp)
= ((L/BW)*BW)/(Tt + 2*Tp)
= Tt/(Tt + 2*Tp) * BW
= 1/(1 + 2a) * BW

Hence, Throughput 
= η * BW

where,
BW : BandWidth
L : Size of Data packet 


Factors affecting Efficiency:
 

n = 1/(1 + 2*(Tp/Tt))
= 1/(1 + 2*(d/v)*(BW/L))

where,
d = distance between source and receiver 
v = velocity 


Let's see an example.

Example:
Given, 
 

Tt = 1ms    
Tp = 2ms   
Bandwidth = 6 Mbps

Efficiency(η) 
= 1/(1 + 2*a)
= 1/(1 + (2*1))
= 1/3  
= 33.33 %

Throughput 
= η * BW
= (1/3) * 6 
= 2 Mbps 


Note:
As we can observe from the above given formula of Efficiency that:
 

On increasing the distance between source and receiver the Efficiency will decrease. Hence, Stop and Wait is only suitable for small area network like LAN. It is not suitable for MAN or WAN, as the efficiency will be very low.
If we increase the size of the Data packet, the efficiency is going to increase. Hence, it is suitable not for small packets. Big data packets can be send by Stop and Wait efficiently.